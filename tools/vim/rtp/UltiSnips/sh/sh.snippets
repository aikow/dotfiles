priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

# -----------------------------------------------------------------------
# Parsing Arguments
# -----------------------------------------------------------------------
snippet clap "command line argument parser" bA
# Store positional args in an array.
declare -a _POSITIONAL_ARGS=()

while [[ ${#@} -gt 0 ]]; do
	case "\${1}" in
		$0
		-*|--*)
			echo "Unknown option \${1}"
			exit 1
			;;
		*)
			_POSITIONAL_ARGS+=("\${1}")  # Save positional argument
			shift  # Past argument.
			;;
	esac
done

# Restore positional arguments.
set -- "${_POSITIONAL_ARGS+"${POSITIONAL_ARGS}"}"
endsnippet

snippet fclap "command line flag" bA
-$1|--$2)
	$3="$4"
	shift  # Past argument
	;;
endsnippet

snippet aclap "command line argument" bA
-$1|--$2)
	$3="\${1}"
	shift  # Past argument
	shift  # Past value
	;;
endsnippet


# -----------------------------------------------------------------------
# Headers
# -----------------------------------------------------------------------
snippet #! "#!/usr/bin/env (!env)" bA
`!p snip.rv = '#!/usr/bin/env ' + getShell()`
endsnippet

snippet sbash "safe bash options" bA
#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

IFS=$' \n\t'
`!p snip.rv ='\n\n' `
endsnippet

# -----------------------------------------------------------------------
# Helper snippets
# -----------------------------------------------------------------------
snippet temp "Tempfile" b
${1:TMPFILE}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet script_dir "script directory" b
readonly SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)"
endsnippet

# -----------------------------------------------------------------------
# Keywords
# -----------------------------------------------------------------------
snippet /case|sw(itch)?/ "case .. esac (case)" rb
case ${1:word} in
	${2:pattern} )
		${0:${VISUAL}};;
esac
endsnippet

snippet elif "elif .. (elif)" b
elif ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL}}
endsnippet

snippet for "for ... done (for)" b
for (( i = 0; i < ${1:10}; i++ )); do
	${0:${VISUAL}}
done
endsnippet

snippet forin "for ... in ... done (forin)" b
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:${VISUAL}}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0`echo \\n`${1/['"`](.+)['"`]/$1/}
endsnippet

snippet /ift(est)?/ "if ... then (if)" rb
if ${2:[ ${1:condition} ]}; then
	${0:${VISUAL}}
fi
endsnippet

snippet if "if ... then (if)" b
if [[ ${1:condition} ]]; then
	${0:${VISUAL}}
fi
endsnippet

snippet until "until ... (done)" b
until ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet /wh(ile)?/ "while ... (done)" rb
while ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL}}
done
endsnippet

snippet func "function() {...}" b
${1:function} () {
	${0:${VISUAL}}
}
endsnippet

snippet fcom "function comment" b
#######################################
# ${0:Description}
# Globals:
#   ${1:None}
# Arguments:
#   ${2:None}
# Outputs:
#		${3:None}
#######################################
endsnippet

# vim:ft=snippets:
