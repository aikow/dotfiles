{
  "safe bash options": {
    "prefix": "sbash",
    "body": [
      "#!/usr/bin/env bash",
      "",
      "set -o errexit",
      "set -o pipefail",
      "set -o nounset",
      "",
      "IFS=$' \\n\\t'",
      "",
      ""
    ],
    "description": "Header for a safe bash script"
  },
  "script directory": {
    "prefix": "scriptdir",
    "body": [
      "script_dir=\"$(cd -- \"$(dirname -- \"\\${BASH_SOURCE[0]}\")\" &>/dev/null && pwd -P)\"",
      "readonly script_dir"
    ],
    "description": "A readonly variable with the path to the directory of the current file"
  },
  "builtin getopts": {
    "prefix": "getopts",
    "body": [
      "while getopts '${1:abc:}' opt; do",
      "  case \"\\${opt}\" in",
      "\t\t$0",
      "\t\t?)",
      "\t\t\techo \"Usage: \\$(basename \"\\$0\") ${2:[-a]}\"",
      "\t\t\texit 1",
      "\t\t\t;;",
      "\tesac",
      "done",
      "",
      "shift \"\\$((OPTIND - 1))\""
    ],
    "description": "Basic parser loop for bash's builtin getopts"
  },
  "getopts flag": {
    "prefix": "fopt",
    "body": ["$1)", "\t$2=true", "\t;;"],
    "description": "Parse a flag from getopts"
  },
  "getopts argument": {
    "prefix": "aopt",
    "body": ["$1)", "\t$2=\"\\${OPTARG}\"", "\t;;"],
    "description": "Parse an optional argument from getopts"
  },
  "command line argument parser": {
    "prefix": "clap",
    "body": [
      "# Store positional args in an array.",
      "declare -a _POSITIONAL_ARGS=()",
      "",
      "while [[ \\${#@} -gt 0 ]]; do",
      "\tcase \"\\$1\" in",
      "\t\t$0",
      "\t\t-*)",
      "\t\t\techo \"Unknown option \\$1\"",
      "\t\t\texit 1",
      "\t\t\t;;",
      "\t\t*)",
      "\t\t\t_POSITIONAL_ARGS+=(\"\\$1\")  # Save positional argument",
      "\t\t\tshift  # Past argument.",
      "\t\t\t;;",
      "\tesac",
      "done",
      "",
      "# Restore positional arguments and delete the temporary array.",
      "set -- \"\\${_POSITIONAL_ARGS[@]+\"\\${_POSITIONAL_ARGS[@]}\"}\"",
      "unset _POSITIONAL_ARGS"
    ],
    "description": "Small heading to separate sections"
  },
  "flag command line argument": {
    "prefix": "fclap",
    "body": ["-$1 | --$2)", "\t$3=true", "\tshift  # Past argument", "\t;;"],
    "description": "Parse a flag from the CLI arguments"
  },
  "argument command line argument": {
    "prefix": "aclap",
    "body": [
      "-$1 | --$2)",
      "\t$3=\"\\$2\"",
      "\tshift  # Past argument",
      "\tshift  # Past value",
      "\t;;"
    ],
    "description": "Parse an optional argument from the CLI arguments"
  },
  "command exists": {
    "prefix": "ifcmd",
    "body": ["command -v ${1:COMMAND} &>/dev/null"],
    "description": "Check if a command is on PATH and return with exit status 0"
  },
  "redirect to dev null": {
    "prefix": "null",
    "body": ["&>/dev/null"],
    "description": "Redirect both stdout and stderr to dev/null"
  }
}
