#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
set -o xtrace

IFS=$' \n\t'

# Store positional args in an array.
declare -a _positional_args=()

while [[ ${#@} -gt 0 ]]; do
  case "${1}" in
    -e | --extract)
      _extract="yes"
      shift # Past argument
      ;;
    -f | --force)
      _force="yes"
      shift # Past argument
      ;;
    -t | --tag)
      _tag="${2}"
      shift # Past argument
      shift # Past value
      ;;
    -*)
      echo "Unknown option ${1}"
      exit 1
      ;;
    *)
      _positional_args+=("${1}") # Save positional argument
      shift                      # Past argument.
      ;;
  esac
done

# Restore positional arguments and delete the temporary array.
set -- "${_positional_args[@]+"${_positional_args[@]}"}"
unset _positional_args

# Extract CLI arguments and flags
extract="${_extract:-no}"
force="${_force:-no}"
tag="${_tag?Missing tag}"

keep_last_n=3

installation_base_dir=$HOME/workspace/tools/neovim
if [[ ${tag} == "nightly" ]]; then
  installation_dir="${installation_base_dir}/${tag}/$(date +%Y-%m-%d)"
else
  installation_dir="${installation_base_dir}/${tag}"
fi
nvim_bin="${HOME}/.local/bin/nvim"

arch="linux-x86_64"
base_url="https://github.com/neovim/neovim/releases/download/${tag}"

# Download the neovim version if it isn't available locally
if [[ -f "${installation_dir}/nvim.appimage" && ${force} != "yes" ]]; then
  echo "${tag} already downloaded"
else
  echo "Downloading ${tag}"
  mkdir -p "${installation_dir}"

  curl -L "${base_url}/nvim.appimage" --output "${installation_dir}/nvim.appimage" --fail \
    || curl -L "${base_url}/nvim-${arch}.appimage" --output "${installation_dir}/nvim-${arch}.appimage"
  curl -L "${base_url}/nvim.appimage.sha256sum" --output "${installation_dir}/nvim.appimage.sha256sum" --fail \
    || curl -L "${base_url}/shasum.txt" --output "${installation_dir}/shasum.txt"

  if [[ -f ${installation_dir}/nvim.appimage ]]; then
    appimage_file="${installation_dir}/nvim.appimage"
    shasum_file="${installation_dir}/nvim.appimage.sha256sum"
  else
    appimage_file="${installation_dir}/nvim-${arch}.appimage"
    shasum_file="${installation_dir}/shasum.txt"
  fi

  echo "Checking checksums"
  (
    cd "${installation_dir}"
    sha256sum --check --ignore-missing --status "${shasum_file}"
  )

  chmod +x "${appimage_file}"

  # Only keep the last 4 nightly images.
  if [[ ${tag} == "nightly" ]]; then
    nightly_tag_dir=${installation_base_dir}/${tag}

    echo "Cleaning old nightly images"
    find "${nightly_tag_dir}" -mindepth 1 -maxdepth 1 -type d -printf '%P\0' \
      | sort -zr \
      | tail -z -n +$((keep_last_n + 2)) \
      | xargs -0 -r -I::: rm -rf "${nightly_tag_dir}/:::"
  fi
fi

if [[ -L ${nvim_bin} ]]; then
  echo "Unlinking old binary"
  unlink "${nvim_bin}"
fi

# Set the active neovim version, extracting if necessary.
if [[ ${extract} == "yes" ]]; then
  echo "Extracting appimage"
  (
    cd "${installation_dir}"
    "${appimage_file}" --appimage-extract &>/dev/null
    rsync --archive --delete ./squashfs-root/ "${installation_base_dir}/active/"
    [[ -d ./squashfs-root ]] && rm -r "./squashfs-root"
  )

  # Create a symlink to the nvim binary.
  echo "Linking binary"
  ln -s "${installation_base_dir}/active/AppRun" "${nvim_bin}"
else
  rsync --archive --delete "${appimage_file}" "${installation_base_dir}/active/"

  echo "Linking binary"
  ln -s "${installation_base_dir}/active/nvim.appimage" "${nvim_bin}"
fi
